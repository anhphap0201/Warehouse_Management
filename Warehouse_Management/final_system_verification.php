<?php

require_once 'vendor/autoload.php';

// Initialize Laravel
$app = require_once 'bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

echo "=== FINAL SYSTEM VERIFICATION ===\n\n";

// Test 1: Check database setup
echo "1. Database Setup Verification:\n";
$stores = \App\Models\Store::count();
$products = \App\Models\Product::count();
$warehouses = \App\Models\Warehouse::count();
$storeInventory = \App\Models\StoreInventory::count();

echo "   ✓ Stores: {$stores}\n";
echo "   ✓ Products: {$products}\n";
echo "   ✓ Warehouses: {$warehouses}\n";
echo "   ✓ Store Inventory Records: {$storeInventory}\n\n";

// Test 2: Test all command variants
echo "2. Testing All Command Variants:\n";

$commands = [
    'Smart Return Requests' => 'stores:smart-return-requests --dry-run',
    'Random Return Requests' => 'stores:generate-return-requests --percentage=50',
    'Smart Shipment Requests' => 'stores:smart-shipment-requests --dry-run',
    'Random Shipment Requests' => 'stores:generate-shipment-requests --percentage=50'
];

foreach ($commands as $name => $command) {
    echo "   Testing {$name}...\n";
    try {
        $exitCode = \Illuminate\Support\Facades\Artisan::call($command);
        if ($exitCode === 0) {
            echo "   ✓ {$name}: SUCCESS\n";
        } else {
            echo "   ❌ {$name}: FAILED (Exit code: {$exitCode})\n";
        }
    } catch (\Exception $e) {
        echo "   ❌ {$name}: ERROR - " . $e->getMessage() . "\n";
    }
}
echo "\n";

// Test 3: Check notification counts by type
echo "3. Notification Statistics:\n";
$totalNotifications = \App\Models\Notification::count();
$autoGenerated = \App\Models\Notification::where('data->auto_generated', true)->count();
$returnRequests = \App\Models\Notification::where('data->generation_type', 'like', '%return%')->count();
$shipmentRequests = \App\Models\Notification::where('data->generation_type', 'like', '%shipment%')->count();
$pending = \App\Models\Notification::where('status', 'pending')->count();

echo "   ✓ Total Notifications: {$totalNotifications}\n";
echo "   ✓ Auto-Generated: {$autoGenerated}\n";
echo "   ✓ Return Requests: {$returnRequests}\n";
echo "   ✓ Shipment Requests: {$shipmentRequests}\n";
echo "   ✓ Pending: {$pending}\n\n";

// Test 4: Check recent activity by generation type
echo "4. Recent Activity (Last 24 hours):\n";
$recentNotifications = \App\Models\Notification::where('created_at', '>=', now()->subDay())
    ->orderBy('created_at', 'desc')
    ->get(['id', 'type', 'store_id', 'title', 'data', 'created_at']);

$typeGroups = [];
foreach ($recentNotifications as $notification) {
    $generationType = $notification->data['generation_type'] ?? 'unknown';
    if (!isset($typeGroups[$generationType])) {
        $typeGroups[$generationType] = 0;
    }
    $typeGroups[$generationType]++;
}

foreach ($typeGroups as $type => $count) {
    echo "   ✓ {$type}: {$count} requests\n";
}
echo "\n";

// Test 5: Test admin interface endpoints (simulate)
echo "5. Admin Interface Compatibility:\n";
try {
    $controller = new \App\Http\Controllers\Admin\AutoGenerationController();
    $stats = $controller->getStats();
    $statsData = json_decode($stats->getContent(), true);
    
    echo "   ✓ Statistics API: Working\n";
    echo "   ✓ Total Auto-Generated: " . $statsData['total_auto_generated'] . "\n";
    echo "   ✓ Today Generated: " . $statsData['today_generated'] . "\n";
    echo "   ✓ Return Requests Total: " . $statsData['return_requests']['total'] . "\n";
    echo "   ✓ Shipment Requests Total: " . $statsData['shipment_requests']['total'] . "\n";
} catch (\Exception $e) {
    echo "   ❌ Statistics API: ERROR - " . $e->getMessage() . "\n";
}
echo "\n";

// Test 6: Check scheduled commands configuration
echo "6. Scheduled Commands Configuration:\n";
$kernelPath = app_path('Console/Kernel.php');
$kernelContent = file_get_contents($kernelPath);

$scheduledCommands = [
    'Daily Random Return' => 'stores:generate-return-requests',
    'Daily Random Shipment' => 'stores:generate-shipment-requests',
    '6-hour Return Analysis' => 'stores:smart-return-requests',
    '6-hour Shipment Analysis' => 'stores:smart-shipment-requests'
];

foreach ($scheduledCommands as $name => $command) {
    if (strpos($kernelContent, $command) !== false) {
        echo "   ✓ {$name}: Configured\n";
    } else {
        echo "   ❌ {$name}: Not found in schedule\n";
    }
}
echo "\n";

// Test 7: Verify model relationships
echo "7. Model Relationships:\n";
try {
    $store = \App\Models\Store::first();
    $storeNotifications = $store->notifications()->count();
    echo "   ✓ Store->Notifications: {$storeNotifications} notifications\n";
    
    $product = \App\Models\Product::first();
    $productStoreInventories = $product->storeInventories()->count();
    echo "   ✓ Product->StoreInventories: {$productStoreInventories} records\n";
    
    $notification = \App\Models\Notification::first();
    if ($notification) {
        $notificationStore = $notification->store->name;
        echo "   ✓ Notification->Store: {$notificationStore}\n";
    }
    
} catch (\Exception $e) {
    echo "   ❌ Model Relationships: ERROR - " . $e->getMessage() . "\n";
}
echo "\n";

// Test 8: Final summary
echo "8. System Status Summary:\n";
$systemHealth = [
    'Database' => $stores > 0 && $products > 0 && $warehouses > 0,
    'Return System' => $returnRequests > 0,
    'Shipment System' => $shipmentRequests > 0,
    'Auto Generation' => $autoGenerated > 0,
    'Pending Requests' => $pending > 0,
];

$healthyComponents = 0;
foreach ($systemHealth as $component => $isHealthy) {
    $status = $isHealthy ? '✅ HEALTHY' : '❌ NEEDS ATTENTION';
    echo "   {$component}: {$status}\n";
    if ($isHealthy) $healthyComponents++;
}

$overallHealth = ($healthyComponents / count($systemHealth)) * 100;
echo "\n📊 Overall System Health: {$overallHealth}%\n";

if ($overallHealth >= 80) {
    echo "🎉 SYSTEM FULLY OPERATIONAL!\n";
} elseif ($overallHealth >= 60) {
    echo "⚠️  SYSTEM MOSTLY WORKING - Minor issues detected\n";
} else {
    echo "❌ SYSTEM NEEDS ATTENTION - Major issues detected\n";
}

echo "\n=== VERIFICATION COMPLETE ===\n";
echo "\n🌐 Web Interface: http://127.0.0.1:8000/admin/auto-generation\n";
echo "📋 Notifications: http://127.0.0.1:8000/notifications\n";
echo "🏪 Stores: http://127.0.0.1:8000/stores\n";
